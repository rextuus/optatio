<?php
declare(strict_types=1);

namespace App\Test;

use App\Content\SecretSanta\Secret\SecretService;
use App\Content\SecretSanta\SecretSantaEvent\SecretSantaEventService;
use App\Content\SecretSanta\SecretSantaService;
use App\Content\SecretSanta\SecretSantaState;
use App\Content\User\UserRepository;
use App\Content\User\UserService;
use App\Entity\SecretSantaEvent;
use App\Entity\User;
use App\Test\IntegrationTestCase;

/**
 * @author Wolfgang Hinzmann <wolfgang.hinzmann@doccheck.com>
 * @license 2023 DocCheck Community GmbH
 */
class SecretSantaServiceTest extends IntegrationTestCase
{
    private SecretSantaService $secretSantaService;

    protected function setUp(): void
    {
        parent::setUp();
        $this->loadFixtureFiles(
            [
                __DIR__ . '/fixtures/secret_santa.yml',
            ]
        );
        $this->secretSantaService = $this->getService(SecretSantaService::class);
    }

    public function testTriggerCalculation(): void
    {
        /** @var User $user1 */
        $user1 = $this->getFixtureEntityByIdent('user1');

        /** @var User $user2 */
        $user2 = $this->getFixtureEntityByIdent('user2');

        /** @var User $user3 */
        $user3 = $this->getFixtureEntityByIdent('user3');

        /** @var SecretSantaEvent $ssEvent */
        $ssEvent = $this->getFixtureEntityByIdent('ss_event');
        $this->assertEquals(SecretSantaState::OPEN, $ssEvent->getState());

        // EXECUTION
        $this->secretSantaService->triggerCalculation($ssEvent);

        $this->assertEquals(SecretSantaState::PHASE_1, $ssEvent->getState());

        $this->refreshLoadedEntity($ssEvent);

        /** @var SecretService $secretService */
        $secretService = $this->getService(SecretService::class);
        $secrets = $secretService->findBy([]);
        $this->assertCount(6, $secrets);

        // check secret creation
        $this->refreshLoadedEntity($user1);
        $providerSecrets = $user1->getProvidingSecrets()->toArray();
        $this->assertEquals($user1->getId(), $providerSecrets[0]->getProvider()->getId());
        $this->assertEquals($user1->getId(), $providerSecrets[1]->getProvider()->getId());
        $user1Receivers = [$providerSecrets[0]->getReceiver()->getId(), $providerSecrets[1]->getReceiver()->getId()];
        $this->assertContains($user2->getId(), $user1Receivers);
        $this->assertContains($user3->getId(), $user1Receivers);

        $receivingSecrets = $user1->getReceivingSecrets()->toArray();
        $this->assertEquals($user1->getId(), $receivingSecrets[0]->getReceiver()->getId());
        $this->assertEquals($user1->getId(), $receivingSecrets[1]->getReceiver()->getId());
        $user1Providers = [$receivingSecrets[0]->getProvider()->getId(), $receivingSecrets[1]->getProvider()->getId()];
        $this->assertContains($user2->getId(), $user1Providers);
        $this->assertContains($user3->getId(), $user1Providers);

        // check desireLists creation
        $desireList = $user1->getDesireLists()->toArray()[0];
        $this->assertEquals($desireList->getName(), $ssEvent->getName());
        $this->assertEquals($desireList->getDescription(), 'This list was autogenerated for event: '.$ssEvent->getName());

        // check desireLists has both events (round1 and round2) => important for sharing
        $events = $desireList->getEvents()->toArray();

        $this->assertCount(2, $events);
        $this->assertEquals($ssEvent->getFirstRound(), $events[0]);
        $this->assertEquals($ssEvent->getSecondRound(), $events[1]);


        // perform first round picks
        $secret = $this->secretSantaService->performFirstRoundPick($ssEvent, $user1);
        $this->assertEquals($user3, $secret->getReceiver());
        $this->assertEquals(SecretSantaState::PHASE_1, $ssEvent->getState());

        $secret = $this->secretSantaService->performFirstRoundPick($ssEvent, $user2);
        $this->assertEquals($user1, $secret->getReceiver());
        $this->assertEquals(SecretSantaState::PHASE_1, $ssEvent->getState());

        $secret = $this->secretSantaService->performFirstRoundPick($ssEvent, $user3);
        $this->assertEquals($user2, $secret->getReceiver());
        $this->assertEquals(SecretSantaState::PHASE_2, $ssEvent->getState());


        // perform second round picks
        $secret = $this->secretSantaService->performSecondRoundPick($ssEvent, $user1);
        $this->assertEquals($user2, $secret->getReceiver());
        $this->assertEquals(SecretSantaState::PHASE_2, $ssEvent->getState());

        $secret = $this->secretSantaService->performSecondRoundPick($ssEvent, $user3);
        $this->assertEquals($user1, $secret->getReceiver());
        $this->assertEquals(SecretSantaState::PHASE_2, $ssEvent->getState());

        $secret = $this->secretSantaService->performSecondRoundPick($ssEvent, $user2);
        $this->assertEquals($user3, $secret->getReceiver());
        $this->assertEquals(SecretSantaState::RUNNING, $ssEvent->getState());
    }

    public function testTriggerCalculationWillFailDueToExclusion(): void
    {
        /** @var SecretSantaEvent $ssEvent */
        $ssEvent = $this->getFixtureEntityByIdent('ss_event_failing_due_to_exclusion');
        $this->assertEquals(SecretSantaState::OPEN, $ssEvent->getState());

        $this->secretSantaService->triggerCalculation($ssEvent);

        $this->assertEquals(SecretSantaState::OPEN, $ssEvent->getState());
    }

    public function testTriggerCalculationWillWorkEvenWithExclusion(): void
    {
        /** @var User $user2 */
        $user2 = $this->getFixtureEntityByIdent('user2');

        /** @var User $user4 */
        $user4 = $this->getFixtureEntityByIdent('user4');

        /** @var SecretSantaEvent $ssEvent */
        $ssEvent = $this->getFixtureEntityByIdent('ss_event_working_even_with_exclusion');
        $this->assertEquals(SecretSantaState::OPEN, $ssEvent->getState());

        $this->secretSantaService->triggerCalculation($ssEvent);

        $this->assertEquals(SecretSantaState::PHASE_1, $ssEvent->getState());

        $this->refreshLoadedEntity($user2);
        $this->refreshLoadedEntity($user4);

        // user2 is only involved in round1 and user4 is only involved in round2
        $desireList = $user2->getDesireLists()->toArray()[0];
        $this->assertEquals($desireList->getName(), $ssEvent->getName());
        $this->assertEquals($desireList->getDescription(), 'This list was autogenerated for event: '.$ssEvent->getName());

        $events = $desireList->getEvents()->toArray();

        $this->assertCount(1, $events);
        $this->assertEquals($ssEvent->getFirstRound(), $events[0]);
        //____________________________________________________________________________

        $desireList = $user4->getDesireLists()->toArray()[0];
        $this->assertEquals($desireList->getName(), $ssEvent->getName());
        $this->assertEquals($desireList->getDescription(), 'This list was autogenerated for event: '.$ssEvent->getName());

        $events = $desireList->getEvents()->toArray();

        $this->assertCount(1, $events);
        $this->assertEquals($ssEvent->getSecondRound(), $events[0]);
    }

    public function testTriggerCalculationWillFailDueToBidirectionalExclusion(): void
    {
        /** @var SecretSantaEvent $ssEvent */
        $ssEvent = $this->getFixtureEntityByIdent('ss_event_failing_due_to_exclusion_bidirectional');
        $this->assertEquals(SecretSantaState::OPEN, $ssEvent->getState());

        $this->secretSantaService->triggerCalculation($ssEvent);

        $this->assertEquals(SecretSantaState::OPEN, $ssEvent->getState());
    }
}
